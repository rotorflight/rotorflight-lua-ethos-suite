--[[

 * Copyright (C) Rotorflight Project
 *
 *
 * License GPLv3: https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * Note.  Some icons have been sourced from https://www.flaticon.com/
 * 

]] --

local en = {
    -- General terms
    ethos                      = "ethos",
    version                    = "version",
    bg_task_disabled           = "bg task disabled",
    background_task_disabled   = "background task disabled",
    no_link                    = "no link",
    image                      = "image",
    error                      = "error",
    reload                     = "reload",
    save                       = "save",

    -- App
    app = {
        -- startup checks
        check_bg_task              = "Please enable the background task.",
        check_rf_module_on         = "Please check your rf module is turned on.",
        check_discovered_sensors   = "Please check you have discovered all sensors.",
        check_heli_on              = "Please check your heli is powered up and radio connected.",
        check_msp_version          = "Unable to determine MSP version in use.",
        check_supported_version    = "This version of the Lua script \ncan't be used with the selected model",

        -- error messages
        error_timed_out            = "Error: timed out",

        -- messages
        msg_save_current_page      = "Save current page to flight controller?",
        msg_save_settings          = "Save settings",
        msg_reload_settings        = "Reload data from flight controller?",
        msg_saving_settings        = "Saving settings...",
        msg_rebooting              = "Rebooting...",
        msg_save_not_commited      = "Save not committed to EEPROM",
        msg_please_disarm_to_save  = "Please disarm to save to ensure data integrity when saving.",
        msg_loading                = "Loading...",
        msg_loading_from_fbl       = "Loading data from flight controller...",
        msg_connecting             = "Connecting",
        msg_connecting_to_fbl      = "Connecting to flight controller...",
        msg_saving                 = "Saving...",
        msg_saving_to_fbl          = "Saving data to flight controller...",

        -- buttons
        btn_ok                     = "          OK           ",    -- intentionaly padded to make it bigger
        btn_ok_long                = "                OK                ",
        btn_cancel                 = "CANCEL",
        btn_close                  = "CLOSE",

        -- menu
        navigation_menu            = "MENU",
        navigation_save            = "SAVE",
        navigation_reload          = "RELOAD",
        navigation_tools           = "*",
        navigation_help            = "?",

        -- sections
        menu_section_flight_tuning = "Flight Tuning",
        menu_section_advanced      = "Advanced",
        menu_section_hardware      = "Hardware",
        menu_section_tools         = "Tools",
        menu_section_developer     = "Developer",
        menu_section_about         = "About",

        unit_hertz = "Hz",

        -- modules
        modules = {
            about = {
                name                = "About",
                version             = "Version",
                ethos_version       = "Ethos Version",
                msp_version         = "MSP Version",
                msp_transport       = "MSP Transport",
                supported_versions  = "Supported MSP Versions",
                simulation          = "Simulation",
                msgbox_credits      = "Credits",
                opener              = "Rotorflight is an open source project. Contribution from other like minded people, keen to assist in making this software even better, is welcomed and encouraged. You do not have to be a hardcore programmer to help.",
                credits             = "Notable contributors to both the Rotorflight firmware and this software are: Petri Mattila, Egon Lubbers, Rob Thomson, Rob Gayle, Phil Kaighin, Robert Burrow, Keith Williams, Bertrand Songis, Venbs Zhou... and many more who have spent hours testing and providing feedback!",
                license             = "You may copy, distribute, and modify the software as long as you track changes/dates in source files. Any modifications to or software including (via compiler) GPL-licensed code must also be made available under the GPL along with build & install instructions.",       
                help_p1               = "This page provides some useful information that you may be asked for when requesting support.",
                help_p2               = "For support, please first read the help pages on www.rotorflight.org",
            },
            accelerometer = {
                name =              "Accelerometer",
                roll =              "Roll",
                pitch =             "Pitch",
                help_p1 =            "The accelerometer is used to measure the angle of the flight controller in relation to the horizon. This data is used to stabilize the aircraft and provide self-leveling functionality.",
            },
            battery = {
                name =              "Battery",
                max_cell_voltage =  "Max Cell Voltage",
                full_cell_voltage = "Full Cell Voltage",
                warn_cell_voltage = "Warn Cell Voltage",
                min_cell_voltage =  "Min Cell Voltage",
                battery_capacity =  "Battery Capacity",
                cell_count =        "Cell Count",
                help_p1 =           "The battery settings are used to configure the flight controller to monitor the battery voltage and provide warnings when the voltage drops below a certain level.",   
            },
            copyprofiles = {
                name =              "Copy Profiles",
                profile_type =      "Profile Type",
                source_profile =    "Source Profile",
                dest_profile =      "Dest. Profile",
                profile_type_pid =  "PID",
                profile_type_rate = "Rate",
                msgbox_save =       "Save settings",
                msgbox_msg  =       "Save current page to flight controller?",
                help_p1 =           "Copy PID profile or Rate profile from Source to Destination.", 
                help_p2 =           "Choose the source and destinations and save to copy the profile.",
            },
            esc_motors = {
                name                    = "ESC/Motors",
                main_motor_ratio        = "Main Motor Ratio",
                tail_motor_ratio        = "Tail Motor Ratio",
                pinion                  = "Pinion",
                main                    = "Main",
                rear                    = "Rear",
                front                   = "Front",
                motor_pole_count        = "Motor Pole Count",
                min_throttle            = "0% Throttle PWM Value",
                max_throttle            = "100% Throttle PWM value",
                mincommand              = "Motor Stop PWM Value",
                voltage_correction      = "Voltage Correction",
                current_correction      = "Current Correction",
                consumption_correction  = "Consumption Correction",
                help_p1                 = "Configure the motor and speed controller features.",

            },
            esc_tools = {
                name =              "ESC Tools",
                unknown =           "UNKNOWN",
                searching =         "Searching",
                please_powercycle   = "Please power cycle the ESC...",
                mfg = {
                    flrtr =  {
                            name                    = "FLYROTOR",
                            basic                   = "Basic",
                            advanced                = "Advanced",
                            governor                = "Governor",
                            low_voltage_protection  = "Low voltage protection",
                            temperature_protection  = "Temperature protection",
                            timing_angle            = "Timing angle",
                            starting_torque         = "Starting torque",
                            response_speed          = "Response speed",
                            buzzer_volume           = "Buzzer volume",
                            current_gain            = "Current gain",
                            cell_count              = "Cell count",
                            bec_voltage             = "BEC voltage",
                            motor_direction         = "Motor direction",
                            soft_start              = "Soft start",
                            fan_control             = "Fan control",
                            gov                     = "Governor",
                            gov_p                   = "Gov-P",
                            gov_i                   = "Gov-I",
                            gov_d                   = "Gov-D",
                            motor_erpm_max          = "Motor ERPM max",
                    },
                    hw5 =  {
                            name = "Hobbywing V5",
                            basic                   = "Basic",
                            advanced                = "Advanced",
                            other                   = "Other",    
                            esc                     =  "ESC",
                            limits                  = "Limits",     
                            flight_mode             = "Flight Mode",
                            rotation                = "Rotation",
                            bec_voltage             = "BEC Voltage",
                            lipo_cell_count         = "LiPo Cell Count",
                            volt_cutoff_type        = "Volt Cutoff Type",
                            cutoff_voltage          = "Cutoff Voltage",
                            governor                = "Governor",
                            soft_start              = "Soft Start",
                            gov_p_gain              = "P-Gain",
                            gov_i_gain              = "I-Gain",
                            startup_time            = "Startup Time",
                            restart_time            = "Restart Time",
                            auto_restart            = "Auto Restart",
                            motor                   = "Motor",
                            brake                   = "Brake",
                            timing                  = "Timing",
                            startup_power           = "Startup Power",
                            active_freewheel        = "Active Freewheel",
                            brake_type              = "Brake Type",
                            brake_force             = "Brake Force%",
                    },
                    scorp =  {
                        name = "Scorpion",
                        basic                   = "Basic",
                        advanced                = "Advanced",
                        limits                  = "Limits",  
                        extra_msg_save          = "Please reboot the ESC to apply the changes",
                        esc_mode                = "ESC Mode",
                        rotation                = "Rotation",
                        bec_voltage             = "BEC Voltage",
                        telemetry_protocol      = "Telemetry Protocol",
                        soft_start_time         = "Soft Start Time",
                        runup_time              = "Runup Time",
                        bailout                 = "Bailout",
                        gov_proportional        = "Gov Proportional",
                        gov_integral            = "Gov Integral",
                        motor_startup_sound     = "Motor Startup Sound",
                        protection_delay        = "Protection Delay",
                        cutoff_handling         = "Cutoff Handling",
                        max_temperature         = "Max Temperature",
                        max_current             = "Max Current",
                        min_voltage             = "Min Voltage",
                        max_used                = "Max Used",
                    },
                    xdfly =  {
                        name = "XDFLY",
                        basic                   = "Basic",
                        advanced                = "Advanced",
                        governor                = "Governor",  
                        timing                  = "Timing",
                        acceleration            = "Acceleration",
                        brake_force             = "Brake Force",
                        sr_function             = "SR Function",
                        capacity_correction     = "Capacity Correction",
                        auto_restart_time       = "Auto Restart Time",
                        cell_cutoff             = "Cell Cutoff",
                        lv_bec_voltage          = "LV BEC Voltage",
                        hv_bec_voltage          = "HV BEC Voltage",
                        motor_direction         = "Motor Direction",
                        startup_power           = "Startup Power",
                        led_color               = "LED Color",
                        smart_fan               = "Smart Fan",
                        gov                     = "Governor",
                        gov_p                   = "Gov-P",
                        gov_i                   = "Gov-I",
                        motor_poles             = "Motor Poles",

                    },
                    yge =  {
                        name = "YGE",
                        basic                   = "Basic",
                        advanced                = "Advanced",
                        other                   = "Other",  
                        esc                     = "ESC",
                        limits                  = "Limits",
                        esc_mode                = "ESC Mode",
                        direction               = "Direction",
                        lv_bec_voltage          = "BEC",
                        auto_restart_time       = "Auto Restart Time",
                        cell_cutoff             = "Cell Cutoff",
                        current_limit           = "Current Limit",
                        min_start_power         = "Min Start Power",
                        max_start_power         = "Max Start Power",
                        throttle_response       = "Throttle Response",
                        timing                  = "Motor Timing",
                        active_freewheel        = "Active Freewheel",
                        f3c_auto                = "F3C Autorotation",
                        gov_p                   = "Gov-P",
                        gov_i                   = "Gov-I",
                        motor_pole_pairs        = "Motor Pole Pairs",
                        main_teeth              = "Main Teeth",
                        pinion_teeth            = "Pinion Teeth",
                        stick_zero_us           = "Stick Zero",
                        stick_range_us          = "Stick Range",                        
                    },
                },
            },
            filters = {
                name                = "Filters",
                lowpass_1           = "Lowpass 1",
                lowpass_1_dyn       = "Lowpass 1 dyn.",
                lowpass_2           = "Lowpass 2",
                notch_1             = "Notch 1",
                notch_2             = "Notch 2",
                filter_type         = "Filter type",
                cutoff              = "Cutoff",
                min_cutoff          = "Min cutoff",
                max_cutoff          = "Max cutoff",
                center              = "Center",
                help_p1             = "Typically you would not edit this page without checking your Blackbox logs!", 
                help_p2             = "Gyro lowpass: Lowpass filters for the gyro signal. Typically left at default.", 
                help_p3             = "Gyro notch filters: Use for filtering specific frequency ranges. Typically not needed in most helis.", 
                help_p4             = "Dynamic Notch Filters: Automatically creates notch filters within the min and max frequency range.",
            },
            governor = {
                name                 = "Governor",
                mode                 = "Mode",
                handover_throttle    = "Handover throttle%",
                spoolup_min_throttle = "Min spoolup throttle%",
                startup_time         = "Startup time",
                spoolup_time         = "Spoolup time",
                tracking_time        = "Tracking time",
                recovery_time        = "Recovery time",
                help_p1              = "These parameters apply globally to the governor regardless of the profile in use.",
                help_p2              = "Each parameter is simply a time value in seconds for each governor action."
            },
            logs = {
                name                 = "Logs",
                msg_no_logs_found    = "NO LOG FILES FOUND",
                help_logs_p1         = "Please select a log file from the list below.",
                help_logs_p2         = "Note. To enable logging it is essential for you to have the following sensors enabled.",
                help_logs_p3         = "- arm status, voltage, headspeed, current, esc temperature",
                help_logs_tool_p1    = "Please use the slider to navigate the graph.",
            },
            mixer = {
                name                           = "Mixer",
                collective_tilt_correction     = "Collective Tilt Correction",
                geo_correction                 = "Geo Correction",
                swash_pitch_limit              = "Total Pitch Limit",
                collective_tilt_correction_pos = "Positive",
                collective_tilt_correction_neg = "Negative",
                swash_phase                    = "Phase Angle",
                swash_tta_precomp              = "TTA Precomp",
                tail_motor_idle                = "Tail Idle Thr%",
                help_p1                        = "Adust swash plate geometry, phase angles, and limits.",
            },
            msp_exp = {
                name                = "MSP Expermintal",
                help_p1             = "This tool provides the ability to send a custom byte string to the flight controller. It is useful for developers when debugging values.", 
                help_p2             = "If you do not understand what you are doing, do not use it as bad things can happen.",
            },
            msp_speed = {
                name                 = "MSP Speed",
                testing              = "Testing",
                testing_performance  = "Testing MSP performance...",
                seconds_600          = "  600S  ",
                seconds_300          = "  300S  ",
                seconds_120          = "  120S  ",
                seconds_30           = "  30S  ",
                start                = "Start",
                start_prompt         = "Would you like to start the test? Choose the test run time below.",
                rf_protocol          = "RF protocol",
                memory_free          = "Memory free",
                test_length          = "Test length",
                total_queries        = "Total queries",
                successful_queries   = "Successful queries",
                timeouts             = "Timeouts",
                retries              = "Retries",
                checksum_errors      = "Checksum errors",
                min_query_time       = "Minimum query time",
                max_query_time       = "Maximum query time",
                avg_query_time       = "Average query time",
                help_p1              = "This tool attempts to determine the quality of your MSP data link by performing as many large MSP queries within 30 seconds as possible.",
            },
            pids = {
                name    = "PIDs",
                roll    = "Roll",
                pitch   = "Pitch",
                yaw     = "Yaw",
                p       = "P",
                i       = "I",
                d       = "D",
                f       = "F",
                o       = "O",
                b       = "B",
                help_p1 = "FeedForward (Roll/Pitch): Start at 70, increase until stops are sharp with no drift. Keep roll and pitch equal.",
                help_p2 = "I Gain (Roll/Pitch): Raise gradually for stable piro pitch pumps. Too high causes wobbles; match roll/pitch values.",
                help_p3 = "Tail P/I/D Gains: Increase P until slight wobble in funnels, then back off slightly. Raise I until tail holds firm in hard moves (too high causes slow wag). Adjust D for smooth stops—higher for slow servos, lower for fast ones.",
                help_p4 = "Tail Stop Gain (CW/CCW): Adjust separately for clean, bounce-free stops in both directions.",
                help_p5 = "Test & Adjust: Fly, observe, and fine-tune for best performance in real conditions.",
            },
            profile_autolevel = {
                name         = "Autolevel",
                acro_trainer = "Acro trainer",
                angle_mode   = "Angle mode",
                horizon_mode = "Horizon mode",
                gain         = "Gain",
                max          = "Max",
                help_p1      = "Acro Trainer: How aggressively the heli tilts back to level when flying in Acro Trainer Mode.",
                help_p2      = "Angle Mode: How aggressively the heli tilts back to level when flying in Angle Mode.",
                help_p3      = "Horizon Mode: How aggressively the heli tilts back to level when flying in Horizon Mode.",
            },
            profile_governor = {
                name                = "Governor",
                gains               = "Gains",
                precomp             = "Precomp",
                tail_torque_assist  = "Tail Torque Assist",
                full_headspeed      = "Full headspeed",
                min_throttle        = "Min throttle",
                max_throttle        = "Max throttle",
                gain                = "PID master gain",
                p                   = "P",
                i                   = "I",
                d                   = "D",
                f                   = "F",
                yaw                 = "Yaw",
                cyc                 = "Cyc",
                col                 = "Col",
                tta_gain            = "Gain",
                tta_limit           = "Limit",
                disabled_message    = "Rotorflight governor is not enabled",
                help_p1             = "Full headspeed: Headspeed target when at 100% throttle input.",
                help_p2             = "PID master gain: How hard the governor works to hold the RPM.",
                help_p3             = "Gains: Fine tuning of the governor.",
                help_p4             = "Precomp: Governor precomp gain for yaw, cyclic, and collective inputs.",
                help_p5             = "Max throttle: The maximum throttle % the governor is allowed to use.",
                help_p6             = "Tail Torque Assist: For motorized tails. Gain and limit of headspeed increase when using main rotor torque for yaw assist.",
            },
            profile_mainrotor = {
                name                        = "Main Rotor",
                collective_pitch_comp       = "Collective Pitch Compensation",
                collective_pitch_comp_short = "Col. Pitch Compensation",
                cyclic_cross_coupling       = "Cyclic Cross coupling",
                gain                        = "Gain",
                ratio                       = "Ratio",
                cutoff                      = "Cutoff",
                help_p1                     = "Collective Pitch Compensation: Increasing will compensate for the pitching motion caused by tail drag when climbing.",
                help_p2                     = "Cross Coupling Gain: Removes roll coupling when only elevator is applied.",
                help_p3                     = "Cross Coupling Ratio: Amount of compensation (pitch vs roll) to apply.",
                help_p4                     = "Cross Coupling Freq. Limit: Frequency limit for the compensation, higher value will make the compensation action faster.",
            },
            profile_pidbandwidth = {
                name         = "PID Bandwidth",
                dterm_cutoff = "D-term cut-off",
                bterm_cutoff = "B-term cut-off",
                roll         = "R",
                pitch        = "P",
                yaw          = "Y",
                help_p1      = "PID Bandwidth: Overall bandwidth in HZ used by the PID loop.",
                help_p2      = "D-term cutoff: D-term cutoff frequency in HZ.",
                help_p3      = "B-term cutoff: B-term cutoff frequency in HZ.",
            },
            profile_pidcontroller = {
                name                = "PID Controller",
                inflight_error_decay = "Inflight Error Decay",
                error_limit         = "Error limit",
                hsi_offset_limit    = "HSI Offset limit",
                iterm_relax         = "I-term relax",
                cutoff_point        = "Cut-off point",
                ground_error_decay  = "Ground Error Decay",
                time                = "Time",
                limit               = "Limit",
                roll                = "R",
                pitch               = "P",
                yaw                 = "Y",
                error_rotation      = "Error rotation",
                help_p1             = "Error decay ground: PID decay to help prevent heli from tipping over when on the ground.",
                help_p2             = "Error limit: Angle limit for I-term.",
                help_p3             = "Offset limit: Angle limit for High Speed Integral (O-term).",
                help_p4             = "Error rotation: Allow errors to be shared between all axes.",
                help_p5             = "I-term relax: Limit accumulation of I-term during fast movements - helps reduce bounce back after fast stick movements. Generally needs to be lower for large helis and can be higher for small helis. Best to only reduce as much as is needed for your flying style.",
            },
            profile_rescue = {
                name         = "Rescue",
                mode_enable  = "Rescue mode enable",
                flip_upright = "Flip to upright",
                pull_up      = "Pull-up",
                collective   = "Collective",
                time         = "Time",
                climb        = "Climb",
                hover        = "Hover",
                flip         = "Flip",
                fail_time    = "Fail time",
                exit_time    = "Exit time",
                level_gain   = "Level",
                gains        = "Gains",
                rate         = "Rate",
                accel        = "Accel",
                help_p1      = "Flip to upright: Flip the heli upright when rescue is activated.",
                help_p2      = "Pull-up: How much collective and for how long to arrest the fall.",
                help_p3      = "Climb: How much collective to maintain a steady climb - and how long.",
                help_p4      = "Hover: How much collective to maintain a steady hover.",
                help_p5      = "Flip: How long to wait before aborting because the flip did not work.",
                help_p6      = "Gains: How hard to fight to keep heli level when engaging rescue mode.",
                help_p7      = "Rate and Accel: Max rotation and acceleration rates when leveling during rescue.",
            },
            profile_select = {
                name            = "Select Profile",
                pid_profile     = "PID profile",
                rate_profile    = "Rate Profile",
                save_settings   = "Save settings",
                save_prompt     = "Save current page to flight controller?",
                ok              = "OK",
                cancel          = "CANCEL",
                help_p1         = "Set the current flight profile or rate profile you would like to use.",
                help_p2         = "If you use a switch on your radio to change flight or rate modes, this will override this choice as soon as you toggle the switch.",
            },
            profile_tailrotor = {
                name                    = "Tail Rotor",
                inertia_precomp         = "Inertia Precomp",
                collective_impulse_ff   = "Collective Impulse FF",
                yaw_stop_gain           = "Yaw stop gain",
                precomp_cutoff          = "Precomp Cutoff",
                cyclic_ff_gain          = "Cyclic FF gain",
                collective_ff_gain      = "Collective FF gain",
                gain                    = "Gain",
                cutoff                  = "Cutoff",
                decay                   = "Decay",
                cw                      = "CW",
                ccw                     = "CCW",
                help_p1                 = "Yaw Stop Gain: Higher stop gain will make the tail stop more aggressively but may cause oscillations if too high. Adjust CW or CCW to make the yaw stops even.",
                help_p2                 = "Precomp Cutoff: Frequency limit for all yaw precompensation actions.",
                help_p3                 = "Cyclic FF Gain: Tail precompensation for cyclic inputs.",
                help_p4                 = "Collective FF Gain: Tail precompensation for collective inputs.",
                help_p5                 = "Collective Impulse FF: Impulse tail precompensation for collective inputs. If you need extra tail precompensation at the beginning of collective input.",
            },
            radio_config = {
                name            = "Radio Config",
                stick           = "Stick",
                throttle        = "Throttle",
                deadband        = "Deadband",
                center          = "Center",
                deflection      = "Deflection",
                arming          = "Arming",
                min_throttle    = "Min",
                max_throttle    = "Max",
                cyclic          = "Cyclic",
                yaw_deadband    = "Yaw",
                help_p1         = "Configure your radio settings. Stick center, arm, throttle hold, and throttle cut.",
            },
            rates = {
                name                = "Rates",
                actual              = "ACTUAL",
                betaflight          = "BETAFLIGHT",
                kiss                = "KISS",
                none                = "NONE",
                quick               = "QUICK",
                raceflight          = "RACEFLIGHT",
                roll                = "Roll",
                pitch               = "Pitch",
                yaw                 = "Yaw",
                collective          = "Col",
                center_sensitivity  = "Cntr. Sens.",
                max_rate            = "Max Rate",
                expo                = "Expo",
                rc_rate             = "RC Rate",
                rate                = "Rate",
                rc_curve            = "RC Curve",
                superrate           = "SuperRate",
                acroplus            = "Acro+",
                help_default_p1     = "Default: We keep this to make button appear for rates.",
                help_default_p2     = "We will use the sub keys below.",
                help_table_0_p1     = "All values are set to zero because no RATE TABLE is in use.",
                help_table_1_p1     = "RC Rate: Maximum rotation rate at full stick deflection.",
                help_table_1_p2     = "SuperRate: Increases maximum rotation rate while reducing sensitivity around half stick.",
                help_table_1_p3     = "Expo: Reduces sensitivity near the stick's center where fine controls are needed.",
                help_table_2_p1     = "Rate: Maximum rotation rate at full stick deflection in degrees per second.",
                help_table_2_p2     = "Acro+: Increases the maximum rotation rate while reducing sensitivity around half stick.",
                help_table_2_p3     = "Expo: Reduces sensitivity near the stick's center where fine controls are needed.",
                help_table_3_p1     = "RC Rate: Maximum rotation rate at full stick deflection.",
                help_table_3_p2     = "Rate: Increases maximum rotation rate while reducing sensitivity around half stick.",
                help_table_3_p3     = "RC Curve: Reduces sensitivity near the stick's center where fine controls are needed.",
                help_table_4_p1     = "Center Sensitivity: Use to reduce sensitivity around center stick. Set Center Sensitivity set to the same as Max Rate for a linear response. A lower number than Max Rate will reduce sensitivity around center stick. Note that higher than Max Rate will increase the Max Rate - not recommended as it causes issues in the Blackbox log.",
                help_table_4_p2     = "Max Rate: Maximum rotation rate at full stick deflection in degrees per second.",
                help_table_4_p3     = "Expo: Reduces sensitivity near the stick's center where fine controls are needed.",
                help_table_5_p1     = "RC Rate: Use to reduce sensitivity around center stick. RC Rate set to one half of the Max Rate is linear. A lower number will reduce sensitivity around center stick. Higher than one half of the Max Rate will also increase the Max Rate.",
                help_table_5_p2     = "Max Rate: Maximum rotation rate at full stick deflection in degrees per second.",
                help_table_5_p3     = "Expo: Reduces sensitivity near the stick's center where fine controls are needed.",
            },
            rates_advanced = {
                name                    = "Rates",
                roll_dynamics           = "Roll dynamics",
                pitch_dynamics          = "Pitch dynamics",
                yaw_dynamics            = "Yaw dynamics",
                collective_dynamics     = "Collective dynamics",
                rates_type              = "Rates Type",
                response_time           = "Time",
                accel_limit             = "Accel",
                msg_reset_to_defaults   = "Rate type changed. Values will be reset to defaults.",
                help_p1                 = "Rates type: Choose the rate type you prefer flying with. Raceflight and Actual are the most straightforward.",
                help_p2                 = "Dynamics: Applied regardless of rates type. Typically left on defaults but can be adjusted to smooth heli movements, like with scale helis.",
            },
            sbusout = {
                name                = "SBUS Out",
                channel_prefix      = "CHANNEL ",
                ch_prefix           = "CH",
                receiver            = "Receiver",
                mixer               = "Mixer",
                servo               = "Servo",
                motor               = "Motor",
                channel_page        = "Sbus out / CH",
                title               = "SBUS Output",
                type                = "Type",
                source              = "Source",
                min                 = "Min",
                max                 = "Max",
                save_settings       = "Save settings",
                save_prompt         = "Save current page to flight controller?",
                ok                  = "OK",
                cancel              = "CANCEL",
                saving              = "Saving",
                saving_data         = "Saving data...",
                help_default_p1     = "Configure advanced mixing and channel mapping if you have SBUS Out enabled on a serial port.",
                help_default_p2     = "- For RX channels or servos (wideband), use 1000, 2000 or 500,1000 for narrow band servos.",
                help_default_p3     = "- For mixer rules, use -1000, 1000.",
                help_default_p4     = "- For motors, use 0, 1000.",
                help_default_p5     = "- Or you can customize your own mapping.",
                help_fields_source  = "Source id for the mix, counting from 0-15.",
                help_fields_min     = "The minimum pwm value to send.",
                help_fields_max     = "The maximum pwm value to send"
            },
            servos  = {
                name                        = "Servos",
                servo_prefix                = "SERVO ",
                tail                        = "TAIL",
                cyc_pitch                   = "CYC. PITCH",
                cyc_left                    = "CYC. LEFT",
                cyc_right                   = "CYC. RIGHT",
                geometry                    = "Geometry",
                speed                       = "Speed",
                rate                        = "Rate",
                scale_negative              = "Scale Negative",
                scale_positive              = "Scale Positive",
                center                      = "Center",
                minimum                     = "Minimum",
                maximum                     = "Maximum",
                saving                      = "Saving",
                saving_data                 = "Saving data...",
                servo_override              = "Servo Override",
                enable_servo_override       = "Enable servo override",
                enabling_servo_override     = "Enabling servo override...",
                disable_servo_override      = "Disable servo override",
                disabling_servo_override    = "Disabling servo override...",
                enable_servo_override_msg   = "Servo override allows you to 'trim' your servo center point in real time.",
                disable_servo_override_msg  = "Return control of the servos to the flight controller.",
                help_default_p1             = "Please select the servo you would like to configure from the list below.",
                help_default_p2             = "Primary flight controls that use the rotoflight mixer will display in the section called 'mixer'.",
                help_default_p3             = "Any other servos that are not controlled by the primary flight mixer will be displayed in the section called 'Other servos'.",
                help_tool_p1                = "Override: [*] Enable override to allow real-time updates of servo center point.",
                help_tool_p2                = "Center: Adjust the center position of the servo.",
                help_tool_p3                = "Minimum/Maximum: Adjust the end points of the selected servo.",
                help_tool_p4                = "Scale: Adjust the amount the servo moves for a given input.",
                help_tool_p5                = "Rate: The frequency the servo runs best at - check with manufacturer.",
                help_tool_p6                = "Speed: The speed the servo moves. Generally only used for the cyclic servos to help the swash move evenly. Optional - leave all at 0 if unsure.",
                help_fields_mid             = "Servo center position pulse width.",
                help_fields_min             = "Servo negative travel limit.",
                help_fields_max             = "Servo positive travel limit.",
                help_fields_scale_neg       = "Servo negative scaling.",
                help_fields_scale_pos       = "Servo positive scaling.",
                help_fields_rate            = "Servo PWM rate.",
                help_fields_speed           = "Servo motion speed in milliseconds.",
                help_fields_flags           = "0 = Default, 1=Reverse, 2 = Geo Correction, 3 = Reverse + Geo Correction"
            },
            status = {
                name                    = "Status",
                arming_flags            = "Arming Flags",
                dataflash_free_space    = "Dataflash Free Space",
                real_time_load          = "Real-time Load",
                cpu_load                = "CPU Load",
                erase                   = "Erase",
                erase_prompt            = "Would you like to erase the dataflash?",
                ok                      = "OK",
                unsupported             = "Unsupported",
                megabyte                = "MB",
                erasing                 = "Erasing",
                erasing_dataflash       = "Erasing dataflash...",
                arming_disable_flag_0   = "No Gyro",
                arming_disable_flag_1   = "Fail Safe",
                arming_disable_flag_2   = "RX Fail Safe",
                arming_disable_flag_3   = "Bad RX Recovery",
                arming_disable_flag_4   = "Box Fail Safe",
                arming_disable_flag_5   = "Governor",
                -- arming_disable_flag_6 = "Crash Detected",
                arming_disable_flag_7   = "Throttle",
                arming_disable_flag_8   = "Angle",
                arming_disable_flag_9   = "Boot Grace Time",
                arming_disable_flag_10  = "No Pre Arm",
                arming_disable_flag_11  = "Load",
                arming_disable_flag_12  = "Calibrating",
                arming_disable_flag_13  = "CLI",
                arming_disable_flag_14  = "CMS Menu",
                arming_disable_flag_15  = "BST",
                arming_disable_flag_16  = "MSP",
                arming_disable_flag_17  = "Paralyze",
                arming_disable_flag_18  = "GPS",
                arming_disable_flag_19  = "Resc",
                arming_disable_flag_20  = "RPM Filter",
                arming_disable_flag_21  = "Reboot Required",
                arming_disable_flag_22  = "DSHOT Bitbang",
                arming_disable_flag_23  = "Acc Calibration",
                arming_disable_flag_24  = "Motor Protocol",
                arming_disable_flag_25  = "Arm Switch",
                help_p1                 = "Use this page to view your current flight controller status. This can be useful when determining why your heli will not arm.",
                help_p2                 = "To erase the dataflash for more log file storage, press the button on the menu denoted by a '*'.",
            },
            trim = {
                name                        = "Trim",
                roll_trim                   = "Roll trim %",
                pitch_trim                  = "Pitch trim %",
                collective_trim             = "Col. trim %",
                tail_motor_idle             = "Tail Motor idle  %",
                yaw_trim                    = "Yaw. trim %",
                mixer_override              = "Mixer Override",
                mixer_override_enabling     = "Enabling mixer override...",
                mixer_override_disabling    = "Disabling mixer override...",
                enable_mixer_override       = "Enable mixer override",
                disable_mixer_override      = "Disable mixer override",
                enable_mixer_message        = "Set all servos to their configured center position. \r\n\r\nThis will result in all values on this page being saved when adjusting the servo trim.",
                disable_mixer_message       = "Return control of the servos to the flight controller.",
                help_p1                     = "Link trims: Use to trim out small leveling issues in your swash plate. Typically only used if the swash links are non-adjustable.",
                help_p2                     = "Motorised tail: If using a motorised tail, use this to set the minimum idle speed and zero yaw.",
            },
            validate_sensors = {
                name           = "Sensors",
                invalid = "INVALID",
                ok      = "OK",
                help_p1        = "This tool attempts to list all the sensors that you are not receiving in a concise list.",
                help_p2        = "Use this tool to ensure you are sending the correct sensors.",
            },

        },

    },

    -- API
    api = {
        ACC_TRIM = {
            pitch = "Use to trim if the heli drifts in one of the stabilized modes (angle, horizon, etc.).",
            roll = "Use to trim if the heli drifts in one of the stabilized modes (angle, horizon, etc.).",
        },
        BATTERY_CONFIG = {
            batteryCapacity = "The milliamp hour capacity of your battery.",
            batteryCellCount = "The number of cells in your battery.",
            vbatmincellvoltage = "The minimum voltage per cell before the low voltage alarm is triggered.",
            vbatmaxcellvoltage = "The maximum voltage per cell before the high voltage alarm is triggered.",
            vbatfullcellvoltage = "The nominal voltage of a fully charged cell.",
            vbatwarningcellvoltage = "The voltage per cell at which the low voltage alarm will start to sound.",
        },
        ESC_SENSOR_CONFIG  = {
            half_duplex = "Half duplex mode for ESC telemetry",
            update_hz = "ESC telemetry update rate",
            current_offset = "Current sensor offset adjustment",
            hw4_current_offset = "Hobbywing v4 current offset adjustment",
            hw4_current_gain = "Hobbywing v4 current gain adjustment",
            hw4_voltage_gain = "Hobbywing v4 voltage gain adjustment",
            pin_swap = "Swap the TX and RX pins for the ESC telemetry",
            voltage_correction = "Adjust the voltage correction",
            current_correction = "Adjust current correction",
            consumption_correction = "Adjust the consumption correction",
            tbl_on = "On",
            tbl_off = "Off",
        },
        FILTER_CONFIG = {
            gyro_lpf1_static_hz = "Lowpass filter cutoff frequency in Hz.",
            gyro_lpf2_static_hz = "Lowpass filter cutoff frequency in Hz.",
            gyro_soft_notch_hz_1 = "Center frequency to which the notch is applied.",
            gyro_soft_notch_cutoff_1 = "Width of the notch filter in Hz.",
            gyro_soft_notch_hz_2 = "Center frequency to which the notch is applied.",
            gyro_soft_notch_cutoff_2 = "Width of the notch filter in Hz.",
            gyro_lpf1_dyn_min_hz = "Dynamic filter min cutoff in Hz.",
            gyro_lpf1_dyn_max_hz = "Dynamic filter max cutoff in Hz."            
        },
        GOVERNOR_CONFIG = {
            gov_startup_time = "Time constant for slow startup, in seconds, measuring the time from zero to full headspeed.",
            gov_spoolup_time = "Time constant for slow spoolup, in seconds, measuring the time from zero to full headspeed.",
            gov_tracking_time = "Time constant for headspeed changes, in seconds, measuring the time from zero to full headspeed.",
            gov_recovery_time = "Time constant for recovery spoolup, in seconds, measuring the time from zero to full headspeed.",
            gov_handover_throttle = "Governor activates above this %. Below this the input throttle is passed to the ESC.",
            gov_spoolup_min_throttle = "Minimum throttle to use for slow spoolup, in percent. For electric motors the default is 5%, for nitro this should be set so the clutch starts to engage for a smooth spoolup 10-15%.",           
            tbl_govmode_off = "OFF", 
            tbl_govmode_passthrough = "PASSTHROUGH", 
            tbl_govmode_standard = "STANDARD", 
            tbl_govmode_mode1 = "MODE1", 
            tbl_govmode_mode2 = "MODE2",
        },
        GOVERNOR_PROFILE = {
            governor_headspeed = "Target headspeed for the current profile.",
            governor_gain = "Master PID loop gain.",
            governor_p_gain = "PID loop P-term gain.",
            governor_i_gain = "PID loop I-term gain.",
            governor_d_gain = "PID loop D-term gain.",
            governor_f_gain = "Feedforward gain.",
            governor_tta_gain = "TTA gain applied to increase headspeed to control the tail in the negative direction (e.g. motorised tail less than idle speed).",
            governor_tta_limit = "TTA max headspeed increase over full headspeed.",
            governor_yaw_ff_weight = "Yaw precompensation weight - how much yaw is mixed into the feedforward.",
            governor_cyclic_ff_weight = "Cyclic precompensation weight - how much cyclic is mixed into the feedforward.",
            governor_collective_ff_weight = "Collective precompensation weight - how much collective is mixed into the feedforward.",
            governor_max_throttle = "Maximum output throttle the governor is allowed to use.",
            governor_min_throttle = "Minimum output throttle the governor is allowed to use."            
        },
        MIXER_CONFIG = {
            tail_motor_idle = "Minimum throttle signal sent to the tail motor. This should be set just high enough that the motor does not stop.",
            tail_center_trim = "Sets tail rotor trim for 0 yaw for variable pitch, or tail motor throttle for 0 yaw for motorized.",
            swash_phase = "Phase offset for the swashplate controls.",
            swash_pitch_limit = "Maximum amount of combined cyclic and collective blade pitch.",
            swash_trim_0 = "Swash trim to level the swash plate when using fixed links.",
            swash_trim_1 = "Swash trim to level the swash plate when using fixed links.",
            swash_trim_2 = "Swash trim to level the swash plate when using fixed links.",
            swash_tta_precomp = "Mixer precomp for 0 yaw.",
            swash_geo_correction = "Adjust if there is too much negative collective or too much positive collective.",
            collective_tilt_correction_pos = "Adjust the collective tilt correction scaling for positive collective pitch.",
            collective_tilt_correction_neg = "Adjust the collective tilt correction scaling for negative collective pitch.",    
            tbl_cw = "CW",
            tbl_ccw = "CCW",        
        },
        MOTOR_CONFIG = {
            minthrottle = "This PWM value is sent to the ESC/Servo at low throttle",
            maxthrottle = "This PWM value is sent to the ESC/Servo at full throttle",
            mincommand = "This PWM value is sent when the motor is stopped",
            motor_pwm_protocol = "The protocol used to communicate with the ESC",
            motor_pwm_rate = "The frequency at which the ESC sends PWM signals to the motor",
            motor_pole_count_0 = "The number of magnets on the motor bell.",
            main_rotor_gear_ratio_0 = "Motor Pinion Gear Tooth Count",
            main_rotor_gear_ratio_1 = "Main Gear Tooth Count",
            tail_rotor_gear_ratio_0 = "Tail Gear Tooth Count",
            tail_rotor_gear_ratio_1 = "Autorotation Gear Tooth Count"            
        },
        PID_PROFILE = {
            error_decay_time_ground = "Bleeds off the current controller error when the craft is not airborne to stop the craft tipping over.",
            error_decay_time_cyclic = "Time constant for bleeding off cyclic I-term. Higher will stabilize hover, lower will drift.",
            error_decay_limit_cyclic = "Maximum bleed-off speed for cyclic I-term.",
            error_rotation = "Rotates the current roll and pitch error terms around yaw when the craft rotates. This is sometimes called Piro Compensation.",
            error_limit_0 = "Hard limit for the angle error in the PID loop. The absolute error and thus the I-term will never go above these limits.",
            error_limit_1 = "Hard limit for the angle error in the PID loop. The absolute error and thus the I-term will never go above these limits.",
            error_limit_2 = "Hard limit for the angle error in the PID loop. The absolute error and thus the I-term will never go above these limits.",
            gyro_cutoff_0 = "PID loop overall bandwidth in Hz.",
            gyro_cutoff_1 = "PID loop overall bandwidth in Hz.",
            gyro_cutoff_2 = "PID loop overall bandwidth in Hz.",
            dterm_cutoff_0 = "D-term cutoff in Hz.",
            dterm_cutoff_1 = "D-term cutoff in Hz.",
            dterm_cutoff_2 = "D-term cutoff in Hz.",
            iterm_relax_type = "Choose the axes in which this is active. RP: Roll, Pitch. RPY: Roll, Pitch, Yaw.",
            iterm_relax_cutoff_0 = "Helps reduce bounce back after fast stick movements. Can cause inconsistency in small stick movements if too low.",
            iterm_relax_cutoff_1 = "Helps reduce bounce back after fast stick movements. Can cause inconsistency in small stick movements if too low.",
            iterm_relax_cutoff_2 = "Helps reduce bounce back after fast stick movements. Can cause inconsistency in small stick movements if too low.",
            yaw_cw_stop_gain = "Stop gain (PD) for clockwise rotation.",
            yaw_ccw_stop_gain = "Stop gain (PD) for counter-clockwise rotation.",
            yaw_precomp_cutoff = "Frequency limit for all yaw precompensation actions.",
            yaw_cyclic_ff_gain = "Cyclic feedforward mixed into yaw (cyclic-to-yaw precomp).",
            yaw_collective_ff_gain = "Collective feedforward mixed into yaw (collective-to-yaw precomp).",
            yaw_collective_dynamic_gain = "An extra boost of yaw precomp on collective input.",
            yaw_collective_dynamic_decay = "Decay time for the extra yaw precomp on collective input.",
            pitch_collective_ff_gain = "Increasing will compensate for the pitching up motion caused by tail drag when climbing.",
            angle_level_strength = "Determines how aggressively the helicopter tilts back to level while in Angle Mode.",
            angle_level_limit = "Limit the maximum angle the helicopter will pitch/roll to while in Angle mode.",
            horizon_level_strength = "Determines how aggressively the helicopter tilts back to level while in Horizon Mode.",
            trainer_gain = "Determines how aggressively the helicopter tilts back to the maximum angle (if exceeded) while in Acro Trainer Mode.",
            trainer_angle_limit = "Limit the maximum angle the helicopter will pitch/roll to while in Acro Trainer Mode.",
            cyclic_cross_coupling_gain = "Amount of compensation applied for pitch-to-roll decoupling.",
            cyclic_cross_coupling_ratio = "Amount of roll-to-pitch compensation needed, vs. pitch-to-roll.",
            cyclic_cross_coupling_cutoff = "Frequency limit for the compensation. Higher value will make the compensation action faster.",
            offset_limit_0 = "Hard limit for the High Speed Integral offset angle in the PID loop. The O-term will never go over these limits.",
            offset_limit_1 = "Hard limit for the High Speed Integral offset angle in the PID loop. The O-term will never go over these limits.",
            bterm_cutoff_0 = "B-term cutoff in Hz.",
            bterm_cutoff_1 = "B-term cutoff in Hz.",
            bterm_cutoff_2 = "B-term cutoff in Hz.",
            yaw_inertia_precomp_gain = "Scalar gain. The strength of the main rotor inertia. Higher value means more precomp is applied to yaw control.",
            yaw_inertia_precomp_cutoff = "Cutoff. Derivative cutoff frequency in 1/10Hz steps. Controls how sharp the precomp is. Higher value is sharper.",
            tbl_off = "OFF",
            tbl_on = "ON",
            tbl_rp = "RP",
            tbl_rpy = "RPY",           
        },
        PID_TUNING = {
            pid_0_P = "How tightly the system tracks the desired setpoint.",
            pid_0_I = "How tightly the system holds its position.",
            pid_0_D = "Strength of dampening to any motion on the system, including external influences. Also reduces overshoot.",
            pid_0_F = "Helps push P-term based on stick input. Increasing will make response more sharp, but can cause overshoot.",
        
            pid_1_P = "How tightly the system tracks the desired setpoint.",
            pid_1_I = "How tightly the system holds its position.",
            pid_1_D = "Strength of dampening to any motion on the system, including external influences. Also reduces overshoot.",
            pid_1_F = "Helps push P-term based on stick input. Increasing will make response more sharp, but can cause overshoot.",
        
            pid_2_P = "How tightly the system tracks the desired setpoint.",
            pid_2_I = "How tightly the system holds its position.",
            pid_2_D = "Strength of dampening to any motion on the system, including external influences. Also reduces overshoot.",
            pid_2_F = "Helps push P-term based on stick input. Increasing will make response more sharp, but can cause overshoot.",
        
            pid_0_B = "Additional boost on the feedforward to make the heli react more to quick stick movements.",
            pid_1_B = "Additional boost on the feedforward to make the heli react more to quick stick movements.",
            pid_2_B = "Additional boost on the feedforward to make the heli react more to quick stick movements.",
        
            pid_0_O = "Used to prevent the craft from rolling when using high collective.",
            pid_1_O = "Used to prevent the craft from pitching when using high collective."           
        },
        RC_CONFIG = {
            rc_center = "Stick center in microseconds (us).",
            rc_deflection = "Stick deflection from center in microseconds (us).",
            rc_arm_throttle = "Throttle must be at or below this value in microseconds (us) to allow arming. Must be at least 10us lower than minimum throttle.",
            rc_min_throttle = "Minimum throttle (0% throttle output) expected from radio, in microseconds (us).",
            rc_max_throttle = "Maximum throttle (100% throttle output) expected from radio, in microseconds (us).",
            rc_deadband = "Deadband for cyclic control in microseconds (us).",
            rc_yaw_deadband = "Deadband for yaw control in microseconds (us)."           
        },
        RC_TUNING = {
            response_time_1 = "Increase or decrease the response time of the rate to smooth heli movements.",
            accel_limit_1 = "Maximum acceleration of the craft in response to a stick movement.",
            response_time_2 = "Increase or decrease the response time of the rate to smooth heli movements.",
            accel_limit_2 = "Maximum acceleration of the craft in response to a stick movement.",
            response_time_3 = "Increase or decrease the response time of the rate to smooth heli movements.",
            accel_limit_3 = "Maximum acceleration of the craft in response to a stick movement.",
            response_time_4 = "Increase or decrease the response time of the rate to smooth heli movements.",
            accel_limit_4 = "Maximum acceleration of the craft in response to a stick movement."
        },
        RESCUE_PROFILE = {
            rescue_flip_mode = "If rescue is activated while inverted, flip to upright - or remain inverted.",
            rescue_flip_gain = "Determine how aggressively the heli flips during inverted rescue.",
            rescue_level_gain = "Determine how aggressively the heli levels during rescue.",
            rescue_pull_up_time = "When rescue is activated, helicopter will apply pull-up collective for this time period before moving to flip or climb stage.",
            rescue_climb_time = "Length of time the climb collective is applied before switching to hover.",
            rescue_flip_time = "If the helicopter is in rescue and is trying to flip to upright and does not within this time, rescue will be aborted.",
            rescue_exit_time = "This limits rapid application of negative collective if the helicopter has rolled during rescue.",
            rescue_pull_up_collective = "Collective value for pull-up climb.",
            rescue_climb_collective = "Collective value for rescue climb.",
            rescue_hover_collective = "Collective value for hover.",
            rescue_max_setpoint_rate = "Limit rescue roll/pitch rate. Larger helicopters may need slower rotation rates.",
            rescue_max_setpoint_accel = "Limit how fast the helicopter accelerates into a roll/pitch. Larger helicopters may need slower acceleration.",
            tbl_off = "OFF",
            tbl_on = "ON",
            tbl_flip = "FLIP",
            tbl_noflip = "NO FLIP",            
        },
        ESC_PARAMETERS_FLYROTOR = {
            throttle_min = "Minimum throttle value",
            throttle_max = "Maximum throttle value",
            cell_count = "Number of cells in the battery",
            low_voltage_protection = "Voltage at which we cut power by 50%",
            temperature_protection = "Temperature at which we cut power by 50%",
            timing_angle = "Timing angle for the motor",
            starting_torque = "Starting torque for the motor",
            response_speed = "Response speed for the motor",
            buzzer_volume = "Buzzer volume",
            current_gain = "Gain value for the current sensor",
            soft_start = "Soft start value",
            gov_p = "Proportional value for the governor",
            gov_i = "Integral value for the governor",
            gov_d = "Derivative value for the governor",
            motor_erpm_max = "Maximum RPM",
            tbl_extgov = "External Governor",
            tbl_escgov = "Esc Governor",
            tbl_cw = "CW",
            tbl_ccw = "CCW",
            tbl_automatic = "Automatic",
            tbl_alwayson = "Always On",
        },
        ESC_PARAMETERS_HW5 = {
            tbl_fixedwing = "Fixed Wing", 
            tbl_heliext   = "Heli Ext Governor", 
            tbl_heligov   = "Heli Governor", 
            tbl_helistore = "Heli Governor Store",
            tbl_cw = "CW",
            tbl_ccw = "CCW",
            tbl_autocalculate = "Auto Calculate",
            tbl_softcutoff = "Soft Cutoff",
            tbl_hardcutoff = "Hard Cutoff",
            tbl_enabled = "Enabled",
            tbl_disabled = "Disabled",
            tbl_normal = "Normal",
            tbl_reverse = "Reverse",
            tbl_proportional = "Proportional",
        },
        ESC_PARAMETERS_SCORPION = {
            tbl_heligov = "Heli Governor", 
            tbl_helistore = "Heli Governor (stored)", 
            tbl_vbar = "VBar Governor", 
            tbl_extgov = "External Governor", 
            tbl_airplane = "Airplane mode", 
            tbl_boat = "Boat mode", 
            tbl_quad = "Quad mode",
            tbl_cw = "CW",
            tbl_ccw = "CCW",
            tbl_standard = "Standard", 
            tbl_vbar = "VBar", 
            tbl_exbus = "Jeti Exbus", 
            tbl_unsolicited = "Unsolicited", 
            tbl_futsbus = "Futaba SBUS",
            tbl_on = "On",
            tbl_off = "Off",
        },
        ESC_PARAMETERS_XDFLY = {
            tbl_fmheli = "Helicopter",
            tbl_fmfw = "Fixed Wing",
            tbl_cw = "CW",
            tbl_ccw = "CCW",
            tbl_low = "Low",
            tbl_medium = "Medium",
            tbl_high = "High",
            tbl_on = "On",
            tbl_off = "Off",
            tbl_red = "Red",
            tbl_yellow = "YELOW",
            tbl_orange = "ORANGE",
            tbl_green = "GREEN",
            tbl_jadegreen = "JADE GREEN",
            tbl_blue = "BLUE",
            tbl_cyan = "CYAN",
            tbl_purple = "PURPLE",
            tbl_pink = "PINK",
            tbl_white = "WHITE",
            tbl_auto = "Auto", 
            tbl_low = "Low", 
            tbl_medium = "Medium", 
            tbl_high = "High",
            tbl_fast = "Fast", 
            tbl_normal = "Normal", 
            tbl_slow = "Slow", 
            tbl_vslow = "Very Slow",
            tbl_normal = "Normal",
            tbl_reverse = "Reverse",
            tbl_on = "ON",
            tbl_off = "OFF",
            tbl_escgov = "ESC Governor", 
            tbl_extgov = "External Governor" , 
            tbl_fwgov = "Fixed Wing"
        },
        ESC_PARAMETERS_YGE = {
            tbl_modefree = "Free (Attention!)", 
            tbl_modeext = "Heli Ext Governor", 
            tbl_modeheli = "Heli Governor", 
            tbl_modestore = "Heli Governor Store", 
            tbl_modeglider = "Aero Glider", 
            tbl_modeair = "Aero Motor", 
            tbl_modef3a = "Aero F3A",
            tbl_normal = "Normal",
            tbl_smooth = "Smooth",
            tbl_reverse = "Reverse",
            tbl_on = "On",
            tbl_off = "Off",
            tbl_slowdown = "Slowdown",
            tbl_cutoff = "Cutoff",
            tbl_slow = "Slow",
            tbl_medium = "Medium",
            tbl_fast = "Fast",
            tbl_custom = "Custom (PC Defined)",
            tbl_autonorm = "Auto Normal", 
            tbl_autoefficient = "Auto Efficient", 
            tbl_autopower = "Auto Power", 
            tbl_autoextreme = "Auto Extreme",
            tbl_auto = "Auto",
            tbl_unused = "*Unused*",
            tbl_alwayson = "Always On",
        }       
    },

    -- Widgets
    widgets = {
        governor = {
                UNKNOWN   = "UNKNOWN",
                OFF       = "OFF",
                IDLE      = "IDLE",
                SPOOLUP   = "SPOOLUP",
                RECOVERY  = "RECOVERY",
                ACTIVE    = "ACTIVE",
                THROFF    = "THR-OFF",
                LOSTHS    = "LOST-HS",
                AUTOROT   = "AUTOROT",
                BAILOUT   = "BAILOUT",
                DISABLED  = "DISABLED",
                DISARMED  = "DISARMED"
        },
        status = {
            title_voltage = "VOLTAGE",
            title_fuel = "FUEL",
            title_mah = "MAH",
            title_rpm = "RPM",
            title_current = "CURRENT",
            title_tempMCU = "T.MCU",
            title_tempESC = "T.ESC",
            title_time = "TIMER",
            title_governor = "GOVERNOR",
            title_fm = "FLIGHT MODE",
            title_rssi = "LQ",

            warn_missing_sensors = "MISSING REQUIRED SENSORS",

            txt_triggers = "Triggers",
            txt_idleupswitch = "Idle Up Switch",
            txt_delaybeforeactive = "Delay Before Active",
            txt_timerconfiguration  = "Timer Configuration",
            txt_playalarmat = "Play Alarm at",
            txt_battery_configuration = "Battery Configuration",
            txt_cells = "Cells",
            txt_max_cell_voltage    = "Maximum Cell Voltage",
            txt_min_cell_voltage    = "Minimum Cell Voltage",
            txt_warn_cell_voltage   = "Warning Cell Voltage",
            txt_low_fuel_percentage = "Low Fuel %",
            txt_play_alerton = "Play Alert on",
            txt_low_voltage = "Low Voltage",
            txt_low_fuel = "Low Fuel",
            txt_low_fuel_voltage = "Low Fuel & Low Voltage",
            txt_disabled = "Disabled",
            txt_interval = "Interval",
            txt_vibrate = "Vibrate",
            txt_switch_announcements    = "Switch Announcements",
            txt_idlespeedlow = "Idle Speed Low",
            txt_idlespeedmedium = "Idle Speed Medium",
            txt_idlespeedhigh = "Idle Speed High",
            txt_rateslow = "Rates low",
            txt_ratesmedium = "Rates medium",
            txt_rateshigh = "Rates high",
            txt_rescueoff = "Rescue Off",
            txt_rescueon = "Rescue On",
            txt_bblon = "BBL On",
            txt_bbloff = "BBL Off",
            txt_telemetry_announcements = "Telemetry Announcements",
            txt_voltage = "Voltage",
            txt_rpm = "RPM",
            txt_current = "Current",
            txt_fuel = "Fuel",
            txt_lq = "LQ",
            txt_esc_temperature = "ESC Temperature",
            txt_mcu_temperature = "MCU Temperature",
            txt_timer = "Timer",
            txt_governor_announcements = "Governor Announcements",
            txt_customise_display    = "Customise Display",
            txt_box1 = "Box 1",
            txt_box2 = "Box 2",
            txt_box3 = "Box 3",
            txt_box4 = "Box 4",
            txt_box5 = "Box 5",
            txt_box6 = "Box 6",
            txt_display_title = "Display Title",
            txt_display_maxmin = "Display Max/Min",
            txt_usecolours = "Use colours to indicate status",
            txt_customsensors = "Custom Sensors",
            txt_customsensor_1 = "Custom Sensor #1",
            txt_customsensor_2 = "Custom Sensor #2",
            txt_advanced = "Advanced",
            txt_governor    = "Governor",
            txt_tempconversion = "Temperature Conversion",
            txt_esc = "ESC",
            txt_disable = "Disable",
            txt_disabled = "Disabled",
            txt_mcu = "MCU",
            txt_sensitivity = "Sensitivity",
            txt_hight = "High",
            txt_low = "Low",
            txt_medium = "Medium",
            txt_rfgovernor = "Rotorflight Governor",
            txt_extgovernor = "External Governor",
            txt_sagcompensation = "Sag Compensation",
            txt_gimbalmonitoring = "Gimbal Monitoring",
            txt_stickcutoff = "Stick Cutoff",
            txt_alertonrpmdiff = "Alert on RPM difference",
            txt_alertifdifflt = "Alert if difference is < than",
            txt_announcement_interval = "Announcement Interval",
            txt_calcfuel_local  = "Calculate Fuel Locally",
            txt_warnsensors = "Warn if missing sensors",
            txt_fuel = "FUEL",
            txt_na = "N/A",
            txt_norepeat = "No Repeat",
            txt_please_enable_bgtask    = "Please enable background task",
            txt_unknown = "UNKNOWN",
            txt_displaysize_invalid = "DISPLAY SIZE INVALID",
            txt_initialising    = "INITIALISING",
            txt_max = "max",
            txt_min = "min",


            layoutOptions = {
                    TIMER = "TIMER",
                    VOLTAGE = "VOLTAGE",
                    FUEL = "FUEL",
                    CURRENT = "CURRENT",
                    MAH = "MAH",
                    RPM = "RPM",
                    LQ = "LQ",
                    TESC = "T.ESC",
                    TMCU = "T.MCU",
                    IMAGE = "IMAGE",
                    GOVERNOR = "GOVERNOR",
                    IMAGE_GOVERNOR = "IMAGE, GOVERNOR",
                    LQ_TIMER = "LQ, TIMER",
                    TESC_TMCU = "T.ESC, T.MCU",
                    VOLTAGE_FUEL = "VOLTAGE, FUEL",
                    VOLTAGE_CURRENT = "VOLTAGE, CURRENT",
                    VOLTAGE_MAH = "VOLTAGE, MAH",
                    LQ_TIMER_TESC_TMCU = "LQ, TIMER, T.ESC, T.MCU",
                    MAX_CURRENT = "MAX CURRENT",
                    LQ_GOVERNOR = "LQ, GOVERNOR",
                    CRAFT_NAME = "CRAFT NAME",
                    CUSTOMSENSOR_1 = "CUSTOMSENSOR #1",
                    CUSTOMSENSOR_2 = "CUSTOMSENSOR #2",
                    CUSTOMSENSOR_1_2 = "CUSTOMSENSOR #1, #2",
            },
        }
    },

}

return en
