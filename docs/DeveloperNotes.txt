==
Creating new pages
==

- The page will need a menu item called from /pages.lua
- should be added in /pages/<pagename.lua 
- icon should be in /gfx/menu/pagename.png

==
Page return info
==

A page is expected to return certain key details.

An example as follows
return {
     read = 123,                                -- MSP CODE TO RECEIVE DATA (if using msp)
     write = 456,                               -- MSP CODE TO SEND DATA (if using msp)
     title = "Page Title",                      -- TITLE
     reboot = false,                            -- RUN REBOOT AFTER SENDING MSP
     eepromWrite = true,                        -- WRITE EPPROM AFTER SENDING MSP
     minBytes = 25,                             -- MINIMUM EXPECTED BYTES FOR A VALID MSP EXCHANGE
     labels = labels,                           -- LABELS USED BY ETHOS FORMS TO RENDER PAGE LABELS (see more below)
     fields = fields,                           -- FIELDS USED BY ETHOS FORMS TO RENDER FIELDS FOR DATA CAPTURE (see more below)
     refreshOnProfileChange = true,             -- DOES TOGGLING THE REFRESH SWITCH MAKE THE PAGE RELOAD
     refreshOnRateChange = true,                -- DOES TOGGLING THE REFRESH SWITCH MAKE THE PAGE RELOAD
     simulatorResponse = {4,10},                -- A VALID BYTE STRING USED WITHIN THE SIMULATOR
     pageTitle = "string"                       -- USE THIS PAGE TITLE INSTEAD OF AUTO DETECTED
     headerLine = "string"                      -- AN OPTIONAL LINE BELOW THE NAV THAT HOLDS TEXT
     postRead = postRead,                       -- A FUNCTON RUN WHEN MSP READ COMPLETES
     postLoad = postLoad,                       -- A FUNCTION RUN WHEN MSP LOAD HAS COMPLETED
     preSave = preSave,                         -- A FUNCTION RUN ON THE PAGES DATA JUST PRIOR TO DOING AN MSP WRITE
     preSavePayload = preSavePayload,           -- A FUNCTION RUN ON THE PAYLOAD JUST PRIOR TO DOING AN MSP WRITE
     wakeup = wakeup,                           -- A WAKEUP FUNCTION THAT RUNS EVERY 0.2ms. USE FOR ANYTHING THAT HAS TO HAPPEN ASYNC
     paint = paint,                             -- A HOOK INTO A FUNCTION CALLED WHENEVER THE LCD IS REDRAWN TO SCREEN
     onNavMenu = onNavMenu,                     -- A function to run when you press the menu button (overide default)
     onSaveMenu = onSaveMenu,                   -- A function to run when you press the menu button (overide default)
     onReloadMenu = onReloadMenu,               -- A function to run when you press the menu button (overide default)
     onHelpMenu = onHelpMenu,                   -- A function to run when you press the menu button (overide default)
      onToolMenu = onToolMenu,                  -- An additional menu button with associated function (no default - tool is custom)
     navButtons = {},                           -- a defined list of nav buttons to show {menu=true,save=true,reload=true,help=true}
     openPage = openPage                        -- alternative function to render page. excected format of:  openPage(idx, title, script)
                                                   it will need to end with  rfsuite.triggers.closeProgressLoader = true or the
                                                   progress dialog will not close.  or use postLoad to trigger this.
     mspRetry = mspRetry,                       -- A hook into msp queue - runs on every msp retry
     mspSuccess = mspSuccess,                   -- A hook into msp success - runs on every msp sucess
     mspTimeout = mspTimeout,                   -- A hook into msp timeout - runs on every msp timeout 
     mspChecksum = mspChecksum,                 -- A hook called every time a checksum error occurs	 
     close = close,                             -- A hook to allow a page to 'cleanup' if system is exiting to ethos menu

}

== 
LABELS AND PAGES VARS
==

Example

labels[#labels + 1] = {t = "Swashplate", label = "line1", inline_size = 40.15}
fields[#fields + 1] = {t = "Geo correction", help = "mixerCollectiveGeoCorrection", label = "line1", inline = 1, min = -125, max = 125, vals = {19}, decimals = 1, scale = 5, step = 2}

labels[#labels + 1] = {t = "", label = "line2", inline_size = 40.15}
fields[#fields + 1] = {t = "Total pitch limit", help = "mixerTotalPitchLimit", label = "line2", inline = 1, min = 0, max = 3000, vals = {10, 11}, decimals = 1, scale = 83.33333333333333, step = 1}

fields[#fields + 1] = {t = "Total pitch limit", help = "mixerTotalPitchLimit", min = 0, max = 3000, vals = {10, 11}, decimals = 1, scale = 83.33333333333333, step = 1}

fields[#fields + 1] = {t = "Mode", min = 0, max = 4, vals = {1}, table = {[0] = "OFF", "PASSTHROUGH", "STANDARD", "MODE1", "MODE2"}}
fields[#fields + 1] = {t = "Accel", help = "profilesRatesDynamicsAcc", inline = 1, label = "pitchdynamics", min = 0, max = 50000, vals = {12, 13}, unit = "Â°/s", mult = 10, step = 10}


The system will iterate over these variables to determine the layout to render using ethos forms.

The following provides an example summary of the parameters you can use.

#LABELS
- t           => Field Text
- t2           => Field Text (small screens)
- label      => A 'tag' that is used to make a field entry be inserted into a label line element
- inline_size      => The size of the fields that are inserted (when associated with the label field)

#FIELDS
- t              => Field Text
- t2             => Field Text (small screens)
- help           => A tag used to determine which text to display from /help/fields.lua
- min            => Minimum value achievable in form input box
- max            => Maximum value  achievable in form input box
- decimals       => A number value to indicate the number of decimal points used on the form field
- scale          => A scaling value used when rendering the value to screen
- mult           => a multiplier used to multiply the value when saving / storing it
- offset         => add or subtract from the stored value by the amount set in offset
- unit           => a unit field added to the end of each text field
- step           => the field can only increment by a certain step value
- vals           => MSP payload location values used for saving and retrieving the data
- table          => If set a drop down select is displayed with the table values shown in the select
- tableIdxInc    => Shift all elements from table up/down by the value set. So you can shit +/- <value> 
- postedit       => a function called whenever the field is changed
- onFocus        => a function called whenever the field is in focus (not yet available)
- type           => 0 = text , 1 = drop down  , 2 or nil = numeric
- position       => {x=0,y=0,w=0,h=0}  

#TRIGGERS
rf2thos.triggers.triggerSave = true             -- trigger and msp save
rf2thos.triggers.triggerReload = true           -- triger an msp reload
rf2thos.triggers.triggerReloadNoPrompt = true   -- triger an msp reload with no confirm
rfsuite.triggers.disableRssiTimeout = true     -- disable the rssi timeout












